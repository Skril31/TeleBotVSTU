import time
from threading import Thread

import telebot
from telebot import types
import requests
import json
import datetime
from datetime import date

import locale
import calendar


bot = telebot.TeleBot('6189016042:AAFAx4cBWX8sIkUXgOygs_BEfYzkbHTAdxc')
#group = 'BDN'
#subgroup = 1
user_chat_id = 'USER_CHAT_ID'
@bot.message_handler(commands=["start"])
def start(message):
    global user_chat_id
    user_chat_id = message.chat.id
    register = requests.get('http://localhost:8080/users').text
    dic = json.loads(register)
    user_id = message.from_user.id
    reg = False
    global master
    master = False
    mbPrepod = False
    for d in dic:
        if user_id == d['id']:
            reg = True
            if(d['subgroup'] == -1):
                mbPrepod = True
            if d['master'] == 1:
                master = True

    if reg and not master and not mbPrepod:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")
        btn2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        btn3 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        btn4 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
        btn5 = types.KeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        markup.add(btn1, btn2, btn3, btn4, btn5)
        bot.send_message(message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–æ–ª–≥–ì–¢–£.".format(
                             message.from_user), reply_markup=markup)
    elif reg and master:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        btn2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–æ–ª–≥–ì–¢–£.".format(
                             message.from_user), reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É")
        btn2 = types.KeyboardButton("–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–æ–ª–≥–ì–¢–£. –£–∫–∞–∂–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.".format(
                             message.from_user), reply_markup=markup)
@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id,text="–ü–æ–º–æ–≥–∞—é")

def send_notification():
    bot.send_message(chat_id=user_chat_id, text='–í–∞—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ')


@bot.message_handler(content_types=['text'])
def func(message):

    if(message.text == "–£–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ò–í–¢-363")
        btn2 = types.KeyboardButton("–ò–í–¢-365")
        btn3 = types.KeyboardButton("–ò–í–¢-360")
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.chat.id, text="–ö–∞–∫–∞—è —É —Ç–µ–±—è –≥—Ä—É–ø–ø–∞?", reply_markup=markup)
        bot.register_next_step_handler(message, get_group)

    elif(message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"):
        my_date = date.today()
        #weektype
        gr = requests.get('http://localhost:8080/users/' + str(message.from_user.id)).text
        inf = json.loads(gr)
        calendar.day_name[my_date.weekday()]
        locale.setlocale(locale.LC_ALL, '')
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        current_date = datetime.datetime.now()
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        week_number = current_date.isocalendar()[1]
        r = requests.get('http://localhost:8080/lessons/weekDay/' + my_date.strftime("%A") + '/weekType/' + str((week_number%2)) + '/group/' + inf['group'] + '/subgroup/' + str(inf['subgroup'])).text
        v = requests.get('http://localhost:8080/lessons/weekDay/' + my_date.strftime("%A") + '/weekType/' + str((week_number % 2)) + '/group/' + inf['group'] + '/subgroup/' + str(0)).text
        try:
            resStr = my_date.strftime("%A") + '\n\n'
            try:
                res = json.loads(r)
                for sc in res:
                    resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + sc['start_time'] + '\n'
                    resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + sc['end_time'] + '\n'
                    resStr += '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + sc['teacher']['fio'] + '\n'
                    resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + sc['lesson_type']['name'] + '\n'
                    resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + sc['subjects']['name'] + '\n'
                    resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + sc['aud']['number'] + ' ' + sc['aud']['corpus'] + '\n\n'
            except Exception:
                print('r pustoi')
            try:
                re = json.loads(v)
                for sc in re:
                    resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + sc['start_time'] + '\n'
                    resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + sc['end_time'] + '\n'
                    resStr += '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + sc['teacher']['fio'] + '\n'
                    resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + sc['lesson_type']['name'] + '\n'
                    resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + sc['subjects']['name'] + '\n'
                    resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + sc['aud']['number'] + ' ' + sc['aud']['corpus'] + '\n\n'
            except Exception:
                print('v pustoi')
            #merged_dict = {key: value for (key, value) in (res.items() + re.items())}

            bot.send_message(message.chat.id, text=resStr)
            #start(message)
        except Exception as e:
            bot.send_message(message.chat.id, text="–ü–æ—Ö–æ–∂–µ —á—Ç–æ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π")
            print(e)

    elif(message.text == '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'):
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(message, get_teacher)
    elif(message.text == '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'):
        my_date = date.today()
        # weektype
        gr = requests.get('http://localhost:8080/users/' + str(message.from_user.id)).text
        inf = json.loads(gr)
        calendar.day_name[my_date.weekday()]
        locale.setlocale(locale.LC_ALL, '')
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        current_date = datetime.datetime.now()
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        week_number = current_date.isocalendar()[1]
        r = requests.get('http://localhost:8080/lessons/weekType/' + str(week_number % 2) + '/group/' + inf['group']).text
        try:
            resStr = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é: \n\n"
            res = json.loads(r)
            for sc in res:
                resStr += '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ' + sc['weekDay'] + '\n'
                resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + sc['start_time'] + '\n'
                resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + sc['end_time'] + '\n'
                resStr += '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + sc['teacher']['fio'] + '\n'
                resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + sc['lesson_type']['name'] + '\n'
                resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + sc['subjects']['name'] + '\n'
                resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + sc['aud']['number'] + ' ' + sc['aud']['corpus'] + '\n\n'
        except Exception:
            print()
        bot.send_message(message.chat.id, text=resStr)
        #start(message)
    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π':
        gr = requests.get('http://localhost:8080/users/' + str(message.from_user.id)).text
        inf = json.loads(gr)
        r = requests.get('http://localhost:8080/ad/' + inf['group'] + '/list')
        resStr = '–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: \n\n'
        try:
            resu = json.loads(r.content)

            for sc in resu:
                if datetime.datetime.now() - datetime.datetime.fromisoformat(sc['localDateTime'])  <= datetime.timedelta(days=7):
                    resStr += '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + sc['teacher_name'] + '\n'
                    resStr += '–û–±—ä—è–≤–ª–µ–Ω–∏–µ: ' + sc['text'] + '\n\n'
        except Exception as e:
            print(e)
        bot.send_message(message.chat.id, text=resStr)
    elif message.text == '–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã (–ù–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω–æ–≤ –ê.–ê.)")
        bot.register_next_step_handler(message, post_teacher_name)

    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ':
        bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, group_for_ad)

    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        r = requests.get("http://localhost:8080/users/" + str(message.chat.id))
        res = json.loads(r.content)
        v = requests.get('http://localhost:8080/teachers/' + res['group'] + '/lessons').text
        resStr = ''
        try:
            res = json.loads(v)
            for sc in res:
                resStr += '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ' + sc['weekDay'] + '\n'
                resStr += '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏: ' + str(sc['weekType']) + '\n'
                resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + sc['start_time'] + '\n'
                resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + sc['end_time'] + '\n'
                resStr += '–ì—Ä—É–ø–ø–∞: ' + sc['groups']['groupName'] + '\n'
                resStr += '–ü–æ–¥–≥—Ä—É–ø–ø–∞: ' + str(sc['groups']['subgroup']) + '\n'
                resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + sc['lesson_type']['name'] + '\n'
                resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + sc['subjects']['name'] + '\n'
                resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + sc['aud']['number'] + ' ' + sc['aud']['corpus'] + '\n\n'
            bot.send_message(message.chat.id, text=resStr)
        except Exception:
            bot.send_message(message.chat.id, text="–¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

def group_for_ad(message):
    global group
    group = message.text
    bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:")
    bot.register_next_step_handler(message, post_ad)
def post_ad(message):
    ad = message.text
    global group
    r = requests.get("http://localhost:8080/users/" + str(message.chat.id))
    res = json.loads(r.content)
    loadAd = {
        "teacher_name": res['group'],
        "text": ad,
        "groups": group
    }
    r = requests.post('http://localhost:8080/ad', json=loadAd)
    bot.send_message(message.chat.id, text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    usersresponse = requests.get('http://localhost:8080/users/' + group + '/list').text
    users = json.loads(usersresponse)
    rStr = "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: " + res['group'] + "\n\n–û–±—ä—è–≤–ª–µ–Ω–∏–µ: " + ad
    for user in users:
        bot.send_message(chat_id=user['id'], text=rStr)
    start(message)
def post_teacher_name(message):
    teacher = message.text
    loaduser = {'id': message.from_user.id,
                'group': teacher,
                "subgroup": -1}
    r = requests.post('http://localhost:8080/users', json=loaduser)
    bot.send_message(message.chat.id, text='–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É. –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start –∏ –≤–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–º–µ–Ω—è–µ—Ç—Å—è.')
    start(message)

# def get_teacher_for_teacher():
#     r = requests.get("http://localhost:8080/users/" + str(user_chat_id))
#     res = json.loads(r)
#     v = requests.get('http://localhost:8080/teachers/' + res['group'] + '/lessons').text
#     resStr = ''
#     try:
#         res = json.loads(v)
#         for sc in res:
#             resStr += '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ' + sc['weekDay'] + '\n'
#             resStr += '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏: ' + str(sc['weekType']) + '\n'
#             resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + sc['start_time'] + '\n'
#             resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + sc['end_time'] + '\n'
#             resStr += '–ì—Ä—É–ø–ø–∞: ' + sc['groups']['groupName'] + '\n'
#             resStr += '–ü–æ–¥–≥—Ä—É–ø–ø–∞: ' + str(sc['groups']['subgroup']) + '\n'
#             resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + sc['lesson_type']['name'] + '\n'
#             resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + sc['subjects']['name'] + '\n'
#             resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + sc['aud']['number'] + ' ' + sc['aud']['corpus'] + '\n\n'
#         bot.send_message(user_chat_id, text=resStr)
#     except Exception:
#         bot.send_message(user_chat_id, text="–¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
def get_teacher(message):
    global teacher
    teacher = message.text
    r = requests.get('http://localhost:8080/teachers/' + teacher + '/lessons').text
    resStr = ''
    try:
        res = json.loads(r)
        for sc in res:
            resStr += '–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: ' + sc['weekDay'] + '\n'
            resStr += '–ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏: ' + str(sc['weekType']) + '\n'
            resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + sc['start_time'] + '\n'
            resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + sc['end_time'] + '\n'
            resStr += '–ì—Ä—É–ø–ø–∞: ' + sc['groups']['groupName'] + '\n'
            resStr += '–ü–æ–¥–≥—Ä—É–ø–ø–∞: ' + str(sc['groups']['subgroup']) + '\n'
            resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + sc['lesson_type']['name'] + '\n'
            resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + sc['subjects']['name'] + '\n'
            resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + sc['aud']['number'] + ' ' + sc['aud']['corpus'] + '\n\n'
        bot.send_message(message.chat.id, text=resStr)
    except Exception :
        bot.send_message(message.chat.id, text="–¢–∞–∫–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")



def get_group(message):
    global group
    group = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("1")
    btn2 = types.KeyboardButton("2")
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è –ø–æ–¥–≥—Ä—É–ø–ø–∞?', reply_markup=markup)
    bot.register_next_step_handler(message, get_subgroup)

def get_subgroup(message):
    global subgroup
    subgroup = message.text

    loaduser = {'id': message.from_user.id,
        'group': group,
        "subgroup": int(subgroup)}
    r = requests.post('http://localhost:8080/users', json=loaduser)
    start(message)

def notification():
    #users = requests.get('http://localhost:8080/users').text
    #usersInfo = json.loads(users)
    lessons = requests.get('http://localhost:8080/lessons').text
    dic = [{'group': '', 'sub': 0, 'dt': '00:00:00'}]
    try:
        lessonsInfo = json.loads(lessons)
        while True:
            my_date = date.today()
            calendar.day_name[my_date.weekday()]
            locale.setlocale(locale.LC_ALL, '')
            current_date = datetime.datetime.now()
            week_number = current_date.isocalendar()[1]
            time.sleep(1)
            #dic = {}
            for ls in lessonsInfo:
                dt = datetime.datetime.now()
                dtForm = dt.strftime("%H:%M:%S")
                dt = datetime.datetime.strptime(dtForm, "%H:%M:%S")
                flag =True
                if len(dic) != 0:
                    for d in dic:

                        if d['group'] == ls['groups']['groupName'] and d['sub'] == ls['groups']['subgroup']:
                            flag = False

                        if (dt - datetime.datetime.strptime(d['dt'], "%H:%M:%S")) >= datetime.timedelta(minutes=50):
                            dic.remove(d)
                if (abs(dt - datetime.datetime.strptime(ls['start_time'], "%H:%M:%S")) <= datetime.timedelta(minutes=30)) and (ls['weekDay'] == my_date.strftime("%A")) and (ls['weekType'] == ((week_number % 2))) and flag:
                    group = ls['groups']['groupName']
                    sub = ls['groups']['subgroup']
                    #–¥–æ–±–∞–≤–ª—è—Ç—å –¥–∞–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–æ—à–µ–ª –ª–∏ —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —Ç–æ —É–¥–∞–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
                    dic1 = {'group': group, 'sub': sub, 'dt': datetime.datetime.now().strftime("%H:%M:%S")}
                    dic.append(dic1)
                    #for di in dic:
                        #if di['dt'] >= datetime.timedelta(minutes=40):
                    resStr = '–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ: \n'
                    resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + ls['start_time'] + '\n'
                    resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + ls['end_time'] + '\n'
                    resStr += '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + ls['teacher']['fio'] + '\n'
                    resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + ls['lesson_type']['name'] + '\n'
                    resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + ls['subjects']['name'] + '\n'
                    resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + ls['aud']['number'] + ' ' + ls['aud']['corpus'] + '\n\n'
                    if sub == 0:
                        users1 = requests.get('http://localhost:8080/users/group/' + group + '/subgroup/' + str(1)).text
                        users2 = requests.get('http://localhost:8080/users/group/' + group + '/subgroup/' + str(2)).text
                        try:
                            usersInfo1 = json.loads(users1)
                            for user in usersInfo1:
                                bot.send_message(chat_id=user['id'], text=resStr)
                        except:
                            print("net 1 pg")
                        try:
                            usersInfo2 = json.loads(users2)
                            for user in usersInfo2:
                                bot.send_message(chat_id=user['id'], text=resStr)
                        except:
                            print("net 2 pg")

                    else:
                        users = requests.get('http://localhost:8080/users/group/' + group + '/subgroup/' + str(sub)).text
                        try:
                            usersInfo = json.loads(users)

                            resStr = '–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –∑–∞–Ω—è—Ç–∏–µ: \n'
                            resStr += '–ù–∞—á–∞–ª–æ –∑–∞–Ω—è—Ç–∏—è: ' + ls['start_time'] + '\n'
                            resStr += '–ö–æ–Ω–µ—Ü –∑–∞–Ω—è—Ç–∏—è: ' + ls['end_time'] + '\n'
                            resStr += '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + ls['teacher']['fio'] + '\n'
                            resStr += '–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: ' + ls['lesson_type']['name'] + '\n'
                            resStr += '–ü—Ä–µ–¥–º–µ—Ç: ' + ls['subjects']['name'] + '\n'
                            resStr += '–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + ls['aud']['number'] + ' ' + ls['aud']['corpus'] + '\n\n'

                            for user in usersInfo:

                                bot.send_message(chat_id=user['id'], text=resStr)
                        except Exception:
                            print("")

    except Exception as e:
        bot.send_message(user_chat_id,text="–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π")
        print(e)
    #my_date = date.today()
    #gr = requests.get('http://localhost:8080/users/' + str(user_chat_id)).text
    # inf = json.loads(gr)
    # calendar.day_name[my_date.weekday()]
    # locale.setlocale(locale.LC_ALL, '')
    #
    # current_date = datetime.datetime.now()
    #
    # week_number = current_date.isocalendar()[1]
    # r = requests.get('http://localhost:8080/lessons/weekDay/' + my_date.strftime("%A") + '/weekType/' + str((week_number%2)+1) + '/group/' + inf['group'] + '/subgroup/' + str(inf['subgroup'])).text


# @bot.callback_query_handler(func=lambda call:True)
# def callback(call):
#     if call.message:
#         if call.data == '363':
#             group = "–ò–í–¢-363"





   # elif(message.text == "üé¨ –ü–æ–¥–±–æ—Ä–∫–∞"):
tread1 = Thread(target=notification, args=())
tread1.start()
bot.polling(none_stop=True, interval=0)

